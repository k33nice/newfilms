<?php

class AppFactory {
    public static $slimInstance;

    public static function initApp() {
        // Create monolog logger and store logger in container as singleton
        // (Singleton resources retrieve the same log resource definition each time)
        // Prepare app
        $app = new \Slim\Slim(array(
            'debug'          => true,
            'mode'           => 'testing',
            'templates.path' => __DIR__ . '/../templates'
        ));

        // $app->container->singleton('log', function () use ($app) {
        //     $log = new \Monolog\Logger('itbox-dealer');

        //     $log->pushHandler(
        //         new \Monolog\Handler\StreamHandler( __DIR__ . '/../logs/app.log', \Monolog\Logger::DEBUG)
        //     );

        //     return $log;
        // });

        // Prepare view
        $app->view(new \Slim\Views\Twig());
        $app->view->parserOptions = array(
            'charset'           => 'utf-8',
            'cache'             => false,
            'auto_reload'       => true,
            'strict_variables'  => true,
            'autoescape'        => true
        );
        $app->view->parserExtensions = array(new \Slim\Views\TwigExtension());

         // Prepare middleware
        $app->get('/api', function() use ($app) {
            $app->add(new \SlimJson\Middleware(array(
              'json.status'            => false,
              'json.override_error'    => false,
              'json.override_notfound' => false
            )));
        });

        // Define API routes
        $app->group('/api', function () use ($app) {
            $app->group('/films', function() use ($app) {
                $films = new \Controller\Films($app);
                $app->get('/', array($films, 'index'))->name('films_index');
                $app->get('/:Id', array($films, 'show'))->name('films_show');
                $app->delete('/:Id', array($films, 'delete'))->name('films_delete');
                $app->post('/:Id', array($films, 'update'))->name('films_update');
                $app->post('/', array($films, 'create'))->name('films_create');
                $app->post('/import/', array($films, 'import'))->name('films_import');
                $app->get('/count/', array($films, 'count'))->name('films_count');
            });
        });

        // Define routes
        $app->get(':method', function ($method) use ($app) {
            // Sample log message
            // $app->log->info("Slim-Skeleton '/' route");

            // Render index view
            $app->render('index.html');
        })->conditions(array('method' => '.+'));

        self::$slimInstance = $app;
    }

    /**
     * [initPropel description]
     *
     * @param  array $config [description]
     */
    public function initPropel($config) {
        extract($config);

        // Autogenerated propel code
        $serviceContainer = \Propel\Runtime\Propel::getServiceContainer();
        $serviceContainer->checkVersion('2.0.0-dev');
        $serviceContainer->setAdapterClass('engine', $driver);
        $manager = new \Propel\Runtime\Connection\ConnectionManagerSingle();
        $manager->setConfiguration(array (
          'dsn' => "$driver:host=$host;dbname=$database;charset=$charset;",
          'user' => $username,
          'password' => $password,
        ));
        $manager->setName('engine');
        $serviceContainer->setConnectionManager('engine', $manager);
        $serviceContainer->setDefaultDatasource('engine');
    }

}

?>